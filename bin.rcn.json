{
  "display_name": "STAMP!",
  "version": 4,
  "code": [
    "const left_dir = 0;",
    "const right_dir = 1;",
    "const up_dir = 2;",
    "const down_dir = 3;",
    "",
    "const char_idle_spr = [9, 10];",
    "const char_walk_spr = [4, 5, 6, 7];",
    "const char_stamp_spr = [1, 2];",
    "const boss_idle_spr = [39, 40];",
    "const boss_walk_spr = [71, 72, 73, 74];",
    "const boss_hit_spr = [41, 42];",
    "const boss_rant_spr = [13, 27, 28];",
    "const boss_down_spr = 43;",
    "const package_spr = [65, 66];",
    "const package_status_spr = {0:67, [-1]:68, 1: 69};",
    "const fire_small_spr = [103, 104, 105, 119, 120, 121];",
    "const fire_big_spr = [106, 108, 110];",
    "",
    "const left_btn = 0;",
    "const right_btn = 1;",
    "const up_btn = 2;",
    "const down_btn = 3;",
    "const interact_btn = 4;",
    "const validate_btn = 4;",
    "const cancel_btn = 5;",
    "",
    "const belt_border_clr = 6;",
    "",
    "const belt_mx = 0;",
    "const belt_my = 48;",
    "",
    "const package_status_time = 16;",
    "const boss_rant_radius = 32;",
    "const boss_follow_radius = 24;",
    "const boss_active_radius = 80;",
    "const boss_target_radius = 12;",
    "const boss_spawn_thres = -5;",
    "const mach_target_radius = 20;",
    "",
    "const stamp_texts = [",
    "  \"MEH\", \"OK\", \"PASSABLE\", \"ALRIGHT\", \"YEP\", \"MKAY\",",
    "  \"SURE\", \"FAIR\", \"ADEQUATE\", \"DECENT\", \"ACCEPTABLE\", ",
    "  \"TOLERABLE\", \"SUFFICIENT\",\"ADMISSIBLE\",",
    "];",
    "const hit_texts = [",
    "  \"NICE!\", \"PERFECT!\", \"AWESOME!\", \"DAMN!\", \"MARVELOUS!\",",
    "  \"EXCELLENT!\", \"BRILLIANT!\", \"SAVAGE!\", \"IMPRESSIVE!\",",
    "  \"YEAH!\", \"AMAZING!\", \"INCREDIBLE!\", \"BRUTAL!\", \"RUTHLESS!\",",
    "];",
    "",
    "let frame = 0;",
    "",
    "function init() {",
    "  menu_init();",
    "}",
    "",
    "// Menu functions",
    "",
    "function menu_init() {",
    "  update = menu_update;",
    "  draw = menu_draw;",
    "  menu_select = 0;",
    "  menu_actions = [",
    "    {",
    "      name: \"PLAY\",",
    "      f: () => game_init(),",
    "    },",
    "    {",
    "      name: \"CONTROLS\",",
    "      f: () => menu_controls_init(),",
    "    },",
    "  ];",
    "  menu_mus();",
    "}",
    "",
    "function menu_update() {",
    "  if(btnp(validate_btn)) {",
    "    validate_sfx();",
    "    return menu_actions[menu_select].f();",
    "  } else if(btnp(up_btn)) {",
    "    menu_select_change(-1);",
    "  } else if(btnp(down_btn)) {",
    "    menu_select_change(1);",
    "  }",
    "}",
    "",
    "function menu_draw() {",
    "  cls(0);",
    "  cam();",
    "  ",
    "  map(3,48,0,0,16,16);",
    "  let textx=48",
    "  let texty=55",
    "  for(let i = 0; i < menu_actions.length; i++) {",
    "    const selected = menu_select == i;",
    "    if (selected) {",
    "      spr(65, textx - 10, texty + i * 8 - 1);",
    "    }",
    "    print(textx, texty + i * 8, menu_actions[i].name, selected ? 3 : 1);",
    "  }",
    "  ",
    "  menu_draw_controls({confirm: true});",
    "}",
    "",
    "function menu_draw_controls(o) {",
    "  let text = \"\";",
    "  if(o.confirm) {",
    "    text += btns(validate_btn) + \" CONFIRM \";",
    "  }",
    "  if(o.continue) {",
    "    text += btns(validate_btn) + \" CONTINUE \";",
    "  }",
    "  if(o.back) {",
    "    text += btns(cancel_btn) + \" BACK\";",
    "  }",
    "  print(7, 119, text, 1);",
    "}",
    "",
    "function menu_select_change(d) {",
    "  menu_select = (menu_select + menu_actions.length + d) % menu_actions.length;",
    "  cursor_sfx();",
    "}",
    "",
    "// Menu controls functions",
    "",
    "function menu_controls_init() {",
    "  update = menu_controls_update;",
    "  draw = menu_controls_draw;",
    "}",
    "",
    "function menu_controls_update() {",
    "  if(btnp(cancel_btn)) {",
    "    cancel_sfx();",
    "    return menu_init();",
    "  }",
    "  frame += 1;",
    "}",
    "",
    "function menu_controls_draw() {",
    "  cls(0);",
    "  cam();",
    "  map(19, 48, 0, 0, 16, 16);",
    "  const arrows = btns((frame >> 4) % 4);",
    "  const controls =",
    "    arrows + \" MOVE\\n\\n\" +",
    "    btns(interact_btn) + \" INTERACT\";",
    "  print(32, 48, controls, 1);",
    "  menu_draw_controls({back: true});",
    "}",
    "",
    "// Gameover functions",
    "",
    "function gameover_init() {",
    "  update = gameover_update;",
    "  draw = gameover_draw;",
    "}",
    "",
    "function gameover_update() {",
    "  if(btnp(interact_btn)) {",
    "    menu_init();",
    "  }",
    "}",
    "",
    "function gameover_draw() {",
    "  cls();",
    "  cam();",
    "  map(35, 48, 0 ,0, 16, 16);",
    "  printo(34, 48, \"CONGRATULATIONS!\", 2,13);",
    "  printo(17, 58, \"That's the end of the game!\", 2,13);",
    "}",
    "",
    "// Game functions",
    "",
    "function game_init() {",
    "  update = game_update;",
    "  draw = game_draw;",
    "  game_mus();",
    "  ",
    "  ren_init();",
    "  mach_init();",
    "  char_init();",
    "  boss_init();",
    "  package_init();",
    "  belt_init();",
    "  ",
    "  corridor = false;",
    "  gameover_timer = 90;",
    "}",
    "",
    "function game_update() {",
    "  if(!corridor && boss_any_down() && cy < 16) {",
    "    cx += 128;",
    "    cy += 108;",
    "    corridor = true;",
    "  }",
    "  ",
    "  ren_update();",
    "  if(!corridor) {",
    "    package_update();",
    "  }",
    "  mach_update();",
    "  char_update();",
    "  boss_update();",
    "  belt_update();",
    "  ",
    "  if(boss_last_down() && gameover_timer-- <= 0) {",
    "    gameover_init();",
    "  }",
    "  ",
    "  frame += 1;",
    "}",
    "",
    "function game_draw() {",
    "  cls();",
    "  ",
    "  if(corridor) {",
    "    cam(mid(128, cx - 64, 896), 0);",
    "    ",
    "    map(16, 0, 128, 0, 112, 16);",
    "  } else {",
    "    cam();",
    "    ",
    "    map(0, 3, 0, 24, 16, 13); // First room",
    "  ",
    "    belt_draw();",
    "    package_draw();",
    "    ",
    "    map(0, 0, 0, 0, 16, 3); // First room wall",
    "  }",
    "  ",
    "  mach_draw();",
    "  ",
    "  boss_draw();",
    "  char_draw();",
    "  ren_draw();",
    "  ",
    "  // Draw package status",
    "  spr(package_status_spr[sign(package_status[0])], 8, 0);",
    "  spr(package_status_spr[sign(package_status[1])], 112, 0);",
    "}",
    "",
    "function game_open_door() {",
    "  mset(6, 0, 33);",
    "  mset(6, 1, 33);",
    "  mset(6, 2, 33);",
    "  mset(7, 0, 33);",
    "  mset(7, 1, 33);",
    "  mset(7, 2, 33);",
    "}",
    "",
    "// Character functions",
    "",
    "function char_init() {",
    "  cx = 64;",
    "  cy = 64;",
    "  cf = 0;",
    "  cd = down_dir;",
    "  cstamp = 0;",
    "  cidle = true;",
    "}",
    "",
    "function char_update() {",
    "  const ox = cx;",
    "  const oy = cy;",
    "  if(cstamp <= 0 && btnp(interact_btn) &&",
    "    (package_target || boss_target || machine_target)) {",
    "    let texts = hit_texts;",
    "    let text_color = 2;",
    "    if(boss_target) {",
    "      boss_take_hit(boss_target);",
    "    } else if(machine_target) {",
    "      mach_hit(cx >> 3, cy >> 3);",
    "    } else {",
    "      package_target.spr = 1;",
    "      texts = stamp_texts;",
    "      text_color = 1;",
    "    }",
    "    floating_text(cx, cy - 18, texts[rnd(texts.length)], text_color, 8);",
    "    cstamp = 6;",
    "    stamp_sfx();",
    "  }",
    "  if(btn(left_btn)) {",
    "    cx -= map_dist_towards(cx, cy, -2, 0);",
    "    cd = left_dir;",
    "  }",
    "  if(btn(right_btn)) {",
    "    cx += map_dist_towards(cx, cy, 2, 0);",
    "    cd = right_dir;",
    "  }",
    "  if(btn(up_btn)) {",
    "    cy -= map_dist_towards(cx, cy, 0, -2)",
    "  }",
    "  if(btn(down_btn)) {",
    "    cy += map_dist_towards(cx, cy, 0, 2);",
    "  }",
    "  ",
    "  cidle = cx == ox && cy == oy;",
    "  ",
    "  if(!cidle && (frame % 12) == 0) {",
    "    step_sfx();",
    "  }",
    "  ",
    "  cstamp -= 1;",
    "}",
    "",
    "function char_draw() {",
    "  const flip = cd == right_dir;",
    "  const x = cx - (flip ? 2 : 5);",
    "  ",
    "  let cspr = cidle ? char_idle_spr[flr(frame / 16) % 2] : char_walk_spr[flr(frame / 3) % 4];",
    "  ",
    "  if(cstamp > 0) {",
    "    cspr = char_stamp_spr[1];",
    "  } else if(cidle && (boss_target || package_target || machine_target)) {",
    "    cspr = char_stamp_spr[0];",
    "  }",
    "  ",
    "  ren_push({",
    "    draw: () => spr(cspr, x, cy - 14, 1, 2, flip),",
    "    depth: cy,",
    "  });",
    "}",
    "",
    "// Package functions",
    "",
    "function package_init() {",
    "  packages = [];",
    "  package_timer = [14, 100];",
    "  package_status = [0, 0];",
    "  package_target = null;",
    "  package_delta = 120;",
    "  package_score = 0;",
    "}",
    "",
    "function package_update() {",
    "  package_target = null;",
    "  for(let p of packages) {",
    "    p.y -= bspeed;",
    "    if(!boss_any_down() && !p.spr && dist(cx, cy, p.x, p.y) < 24) {",
    "      package_target = p;",
    "    }",
    "    if(p.y < 14) {",
    "      package_status[p.side] = (p.spr ? 1 : -1) * package_status_time;",
    "      p.spr ? package_success_sfx() : package_failure_sfx();",
    "      package_score = mid(package_score + (p.spr ? 0.1 : -1), -5, 5);",
    "    }",
    "  }",
    "  ",
    "  packages = packages.filter(p => p.y >= 14);",
    "  ",
    "  if(!machine_fire) {",
    "    for(let side = 0; side < 2; side++) {",
    "      if(package_timer[side] <= 0) {",
    "        package_create(side);",
    "        package_timer[side] = package_delta + rnd(package_delta);",
    "      }",
    "    }",
    "    ",
    "    package_status[0] -= sign(package_status[0]);",
    "    package_status[1] -= sign(package_status[1]);",
    "    package_timer[0] -= 1;",
    "    package_timer[1] -= 1;",
    "    ",
    "    package_delta /= 1.0003;",
    "    package_delta = max(package_delta, 2.3);",
    "  }",
    "}",
    "",
    "function package_draw() {",
    "  for(let p of packages) {",
    "    spr(package_spr[p.spr], p.x - 4, p.y - 4);",
    "    ",
    "    // Display input  ",
    "    if(!boss_target && package_target == p && p.spr == 0) {",
    "      print(p.x - 3, p.y - 10, btns(interact_btn), 1);",
    "    }",
    "  }",
    "}",
    "",
    "function package_create(side) {",
    "  const x = side ? 112 : 8;",
    "  packages.push({",
    "    x: x + rnd(8), y: 120,",
    "    side: side,",
    "    spr: 0,",
    "  });",
    "}",
    "",
    "// Belt functions",
    "",
    "function belt_init() {",
    "  boff = 0;",
    "  bspeed = 0.2;",
    "}",
    "",
    "function belt_update() {",
    "  boff += bspeed;",
    "  if(machine_fire) {",
    "    bspeed /= 1.2;",
    "    if(bspeed < 0.1) {",
    "      bspeed = 0;",
    "    }",
    "  } else {",
    "    bspeed *= 1.0003;",
    "    bspeed = min(bspeed, 3);",
    "  }",
    "}",
    "",
    "function belt_draw() {",
    "  const boffr = boff % 128;",
    "  map(belt_mx, belt_my, 0, -boffr, 3, 16);",
    "  map(belt_mx, belt_my, 0, -boffr + 128, 3, 16);",
    "  map(belt_mx, belt_my, 104, -boffr, 3, 16);",
    "  map(belt_mx, belt_my, 104, -boffr + 128, 3, 16);",
    "  ",
    "  // Belt borders",
    "  rect(0, 24, 2, 88, belt_border_clr);",
    "  rect(22, 24, 2, 88, belt_border_clr);",
    "  rect(104, 24, 2, 88, belt_border_clr);",
    "  rect(126, 24, 2, 88, belt_border_clr);",
    "}",
    "",
    "// Boss functions",
    "",
    "function boss_init() {",
    "   boss_spawned = false;",
    "   boss_target = null;",
    "   bosses = [];",
    "   boss_spawn(25 * 8 + 3, 10 * 8 + 3);",
    "   boss_spawn(34 * 8 + 3, 9 * 8 + 3);",
    "   boss_spawn(51 * 8 + 3, 9 * 8 + 3);",
    "   boss_spawn(72 * 8 + 3, 5 * 8 + 3, 15, true);",
    "}",
    "",
    "function boss_update() {",
    "  if(!boss_spawned && package_score <= boss_spawn_thres) {",
    "    boss_spawn_door();",
    "  }",
    "  ",
    "  boss_target = null;",
    "  for(let b of bosses.filter(b => b.health > 0)) {",
    "    b.move = false;",
    "    const ox = b.x;",
    "    const oy = b.y;",
    "    const d = dist(b.x, b.y, cx, cy);",
    "    if(d > boss_active_radius) {",
    "      continue;",
    "    }",
    "    if(d > boss_follow_radius) {",
    "      if(cx < b.x) {",
    "        b.x -= map_dist_towards(b.x, b.y, -1, 0);",
    "      }",
    "      if(cx > b.x) {",
    "        b.x += map_dist_towards(b.x, b.y, 1, 0);",
    "      }",
    "      if(cy < b.y) {",
    "        b.y -= map_dist_towards(b.x, b.y, 0, -1);",
    "      }",
    "      if(cy > b.y) {",
    "        b.y += map_dist_towards(b.x, b.y, 0, 1);",
    "      }",
    "    }",
    "    ",
    "    b.move = b.x != ox || b.y != oy;",
    "    ",
    "    if(d < boss_target_radius) {",
    "      boss_target = b;",
    "    }",
    "  }",
    "}",
    "",
    "function boss_draw() {",
    "  for(let b of bosses) {",
    "    let flip = cx > b.x;",
    "",
    "    let bspr = b.move ? boss_walk_spr[flr(frame / 3) % 4] : boss_idle_spr[flr(frame / 16) % 2];",
    "    ",
    "    if(b.hit > 0) {",
    "      bspr = boss_hit_spr[0];",
    "      flip = !flip;",
    "    } else if(b.hit < 0) {",
    "      bspr = boss_hit_spr[1];",
    "      flip = !flip;",
    "    }",
    "    ",
    "    if(b.health <= 0) {",
    "      bspr = boss_down_spr;",
    "      flip = false;",
    "    }",
    "    ",
    "    const x = b.x - (flip ? 3 : 4);",
    "    ",
    "    ren_push({",
    "      draw: () => {",
    "        if(b.last) {",
    "          palm(8, 15);",
    "          palm(15, 11);",
    "        }",
    "        spr(bspr, x, b.y - 14, 1, 2, flip);",
    "        palm(8, 8);",
    "        palm(15, 15);",
    "      },",
    "      depth: b.y,",
    "    });",
    "    ",
    "    if(b.health > 0) {",
    "      // Display rant",
    "      if(dist(b.x, b.y, cx, cy) <= boss_rant_radius) {",
    "        if((frame % 4) == 0) {",
    "          b.rspr = boss_rant_spr[rnd(boss_rant_spr.length)];",
    "        }",
    "        ren_push({",
    "          draw: () => spr(b.rspr, x + 8, b.y - 18 + flr(frame / 8) % 2),",
    "          depth: b.y,",
    "        });",
    "      }",
    "      ",
    "      // Display input",
    "      if(boss_target) {",
    "        ren_push({",
    "          draw: () => print(b.x - 3, b.y - 20, btns(interact_btn), 1),",
    "          depth: b.y,",
    "        });",
    "      }",
    "      ",
    "      b.hit -= sign(b.hit);",
    "    }",
    "  }",
    "}",
    "",
    "function boss_spawn(x, y, h, last) {",
    "  h = h || 5;",
    "  bosses.push({",
    "    x: x,",
    "    y: y,",
    "    health: h,",
    "    last: last,",
    "  });",
    "}",
    "",
    "function boss_spawn_door() {",
    "  boss_spawn(56, 24);",
    "  game_open_door();",
    "  boss_spawned = true;",
    "}",
    "",
    "function boss_take_hit(b) {",
    "  b.hit = b.hit > 0 ? -10 : 10;",
    "  b.health -= 1;",
    "}",
    "",
    "function boss_any_down() {",
    "  return bosses.find(b => b.health <= 0);",
    "}",
    "",
    "function boss_last_down() {",
    "  return bosses.find(b => b.last && b.health <= 0);",
    "}",
    "",
    "// Machine functions",
    "",
    "function mach_init() {",
    "  machines = [];",
    "  machine_target = null;",
    "  machine_fire = false;",
    "  ",
    "  mach_reg({",
    "    x: 0, y: 0,",
    "    w: 128, h: 16,",
    "  });",
    "}",
    "",
    "function mach_update() {",
    "  machine_target = null;",
    "  machine_fire = false;",
    "  if(!boss_any_down()) {",
    "    return;",
    "  }",
    "  for(let m of machines) {",
    "    const d = dist(m.x + 4, m.y + 4, cx, cy);",
    "    if(!boss_target && m.state < 4 && d < mach_target_radius &&",
    "      (!machine_target || d < dist(machine_target.x + 4, machine_target.y + 4, cx, cy))) {",
    "      machine_target = m;",
    "    }",
    "    if(m.state >= 3) {",
    "      machine_fire = true;",
    "    }",
    "  }",
    "}",
    "",
    "function mach_draw() {",
    "  const big_fires = [];",
    "  for(let m of machines) {",
    "    if(m.state < 1 || (m.spr < 128 || m.spr >= 160)) {",
    "      spr(m.spr, m.x, m.y);",
    "    } else {",
    "      spr(m.spr + 8, m.x, m.y);",
    "    }",
    "    if(m.state == 2) {",
    "      spr(161 + m.mx % 2 + (m.my % 2) * 16, m.x, m.y);",
    "    }",
    "    if(m.state == 4) {",
    "      let big_fire = big_fires.find(f => f.x == m.fx && f.y == m.fy);",
    "      if(!big_fire) {",
    "        big_fire = {x: m.fx, y: m.fy, n: 0, off: m.off};",
    "        big_fires.push(big_fire);",
    "      }",
    "      big_fire.n += 1;",
    "    }",
    "  }",
    "  for(let f of big_fires) {",
    "    if(f.n == 4) {",
    "      spr(fire_big_spr[flr(frame / 4 + f.off) % 3], f.x << 3, f.y << 3, 2, 2);",
    "    }",
    "  }",
    "  for(let m of machines) {",
    "    const in_big_fire = big_fires.find(f => f.x == m.fx && f.y == m.fy && f.n == 4);",
    "    if(!in_big_fire && m.state >= 3) {",
    "      spr(fire_small_spr[flr(frame / 3 + m.off) % 6], m.x, m.y);",
    "    }",
    "  }",
    "  ",
    "  // Display input",
    "  if(machine_target) {",
    "    ren_push({",
    "      draw: () => print(machine_target.x + 1, machine_target.y - 7, btns(interact_btn), 1),",
    "      depth: machine_target.y,",
    "    });",
    "  }",
    "}",
    "",
    "function mach_reg(o) {",
    "  for(let x = 0; x < o.w; x++) {",
    "    for(let y = 0; y < o.h; y++) {",
    "      const mx = o.x + x;",
    "      const my = o.y + y;",
    "      const spr = mget(mx, my);",
    "      if(!fget(spr, 1)) {",
    "        continue;",
    "      }",
    "      machines.push({",
    "        mx: mx, my: my,",
    "        x: mx << 3, y: my << 3,",
    "        fx: mx - (mx % 2), fy: my - (my % 2),",
    "        spr: spr,",
    "        state: 0,",
    "        off: rnd(6),",
    "      });",
    "    }",
    "  }",
    "}",
    "",
    "function mach_hit(x, y) {",
    "  for(let m of machines) {",
    "    if(dist(m.x + 4, m.y + 4, cx, cy) < mach_target_radius) {",
    "       m.state = min(m.state + 1, 4);",
    "    }",
    "  }",
    "}",
    "",
    "// Map functions",
    "",
    "function map_is_walkable(x, y) {",
    "   const mx = x >> 3;",
    "   const my = y >> 3;",
    "   return fget(mget(mx, my), 0);",
    "}",
    "",
    "function map_dist_towards(x, y, dx, dy) {",
    "  const max_dist = max(abs(dx), abs(dy));",
    "  let dist = 0;",
    "  while(dist < max_dist &&",
    "    map_is_walkable(x + sign(dx) - 3, y + sign(dy) - 3) &&",
    "    map_is_walkable(x + sign(dx) - 3, y + sign(dy) + 3) &&",
    "    map_is_walkable(x + sign(dx) + 3, y + sign(dy) - 3) &&",
    "    map_is_walkable(x + sign(dx) + 3, y + sign(dy) + 3)) {",
    "    x += dx;",
    "    y += dy;",
    "    dist += 1;",
    "  }",
    "  return dist;",
    "}",
    "",
    "// Rendering functions",
    "",
    "function ren_init() {",
    "  renders = [];",
    "  render_frame = 0;",
    "}",
    "",
    "function ren_update() {",
    "  for(let render of renders) {",
    "    render.update();",
    "  }",
    "  ",
    "  render_frame += 1;",
    "}",
    "",
    "function ren_draw() {",
    "  renders = renders.filter(r => r.frame >= render_frame);",
    "  renders.sort((a, b) => a.depth - b.depth);",
    "  for(let render of renders) {",
    "    render.draw();",
    "  }",
    "}",
    "",
    "function ren_push(o) {",
    "  o.frame = render_frame + (o.duration || 0);",
    "  if(!o.update) {",
    "    o.update = () => false;",
    "  }",
    "  renders.push(o);",
    "}",
    "",
    "// Text functions",
    "",
    "function printo(x, y, text, c, co) {",
    "  print(x - 1, y, text, co);",
    "  print(x + 1, y, text, co);",
    "  print(x, y - 1, text, co);",
    "  print(x, y + 1, text, co);",
    "  print(x, y, text, c);",
    "}",
    "",
    "function floating_text(x, y, text, c, co) {",
    "  x -= print(-128, -128, text) / 2;",
    "  ren_push({",
    "    draw: () => printo(x, y, text, c, co),",
    "    update: () => y -= 1,",
    "    duration: 10,",
    "    depth: 99999,",
    "  });",
    "}",
    "",
    "// Sound functions",
    "",
    "function cursor_sfx() {",
    "  sfx(63, chan=-1, off=0, len=8);",
    "}",
    "",
    "function validate_sfx() {",
    "  sfx(63, chan=-1, off=8, len=8);",
    "}",
    "",
    "function cancel_sfx() {",
    "  sfx(63, chan=-1, off=16, len=8);",
    "}",
    "",
    "function stamp_sfx() {",
    "  sfx(61, chan=-1, off=0, len=1);",
    "}",
    "",
    "function step_sfx() {",
    "  sfx(61, chan=-1, off=4, len=1);",
    "}",
    "",
    "function package_success_sfx() {",
    "  sfx(63, chan=-1, off=24, len=4);",
    "}",
    "",
    "function package_failure_sfx() {",
    "  sfx(62, chan=-1, off=0, len=8);",
    "}",
    "",
    "// Music functions",
    "",
    "let in_menu = false;",
    "",
    "function menu_mus() {",
    "  if(!in_menu) {",
    "    mus(4);",
    "    in_menu = true;",
    "  }",
    "}",
    "",
    "function game_mus() {",
    "  if(in_menu) {",
    "    mus(8);",
    "    in_menu = false;",
    "  }",
    "}",
    "",
    "// Misc functions",
    "",
    "function dist(x0, y0, x1, y1) {",
    "  const dx = x0 - x1;",
    "  const dy = y0 - y1;",
    "  return sqrt(dx * dx + dy * dy);",
    "}"
  ],
  "rom": {
    "spr": [
      "000000000000000000000000bbbbbbbb00000000000000000000000000000000",
      "666666660000000000000000cccccceeccccccee00111101ccc5c5cceececccc",
      "000000000000000000000000eeddddee00000000000000000000000000000000",
      "666666660000000000000000cccccceebcbbcbee10111111cc5ccccceecd3ccc",
      "000000000000880000000000dedddded00000000008800000088000000880000",
      "666666660080080000800800ccccccedbcbbcbed10111f11cc5c5cccdecd33c3",
      "000000002000880000000000dedddded00880000008800000088000000880000",
      "666666660080080000800800cccccced4c44c4ed10f11111cc5cc5ccdecdb3cb",
      "000000002009800000008800dedddded00880000008000000080000000800000",
      "666666660000aa000000aa00ccccccedbcbbcbed10ffff115c5cccc5decdb2cb",
      "000000002292a90a00008800dedddded0080000000a00a0000a00a0000a00a00",
      "6666666600a0aa0a00a0aa00ccccccedbcbbcbed11111f11cc555cccdecd22c2",
      "000000000000a0aa00008000eeddddee00900a000090aa0000a0a90000a0a900",
      "6666666600a0aa0a00a0aa0accbbcbeeccccccee10f11111cc5c5ccceecdcccc",
      "000000000000a0aa0000a00aeeeeeeee0090aa000090aa0000a09a0000a09a00",
      "666666660090aa0a0090aa0acccccceeccccccee001111014c4444c4eececccc",
      "000000000000a0aa0000a9aaeeeeeeee00a9aa090090aa0000a09a0000a9aa09",
      "ccccbcbb0090aa0a0090aa0a0011110100111101b4bbbb4bb6bbbb6beececcc6",
      "00000000000030330000a9aaeeddddee00a9aa090090aa0000a99a0090a0aa09",
      "ccccbcbb000933030090aa0a10f11111101111116b6666b666bbbb66eecdbccb",
      "000000000000303320909033dedddded90a0aa00003933000030330000303300",
      "bcbbbcbb0000330300093303101f1f1f10f1f1116b6696b64dbbbbdddecd6cc6",
      "000000000000303020093333dedddded00303300003003000033030000300300",
      "bcbbbcbb000003030000030310111f1f10f1f1116bf696b6dd4ddddddecd6cc6",
      "000000000000303022020303dedddded00300300003003000003330000330300",
      "bcbbcccc000003030000030310f1111f10f1f1116bf697b6ddddd4dddecdcccc",
      "000000000000303000000303dedddded00033300003033090030300000033303",
      "bcbbcccc000003030000030311111111111111116bf197b6ddd4ddd4de4dcccc",
      "000000000000303000003030eeddddee00030003000003000000090330000090",
      "cccccccc000003030000030310f1111f10f1f1116b6666b64ddd4dddeedd44c4",
      "000000000000909000009090eeeeeeee00090090000009000000000990000000",
      "cccccccc00000909000009090011110100111101b4bbbb4bdddddd4deeeeeece",
      "55555555d4dddddd66666666cccccccccccccccccccccccccccccccc00000000",
      "000000000000000000000000000000004c44444444444444444444cceeeeeeee",
      "55555555ddd4ddd466666666cccc6c666666666666c6ccccccbbbbcc00000000",
      "000000000000000000000000000000003433b33b33333333333333c4eeddddee",
      "555555554ddd4ddd4ddd4dddcccc6666666666666666ccccccbbbbcc0000ff00",
      "0000f00f00ff00000000ff000000000034b2bb2b23232323bb2323c4dedddded",
      "55555555dd4ddddddd4dddddcc6c66e6eeeeeeee6e66c6ccccbbbbcc0001ff00",
      "0100f00f00ff00000000ff000000000024bbbbbb2222bbb2bbbb22c4dedddded",
      "55555555ddddd4ddddddd4ddcc66e6eeeeeeeeeeee6e66ccbcbbcbcc00081000",
      "80000001001000000000010000000000b4bbbbbbbbbbbbbbbbbbbbc4dedddded",
      "55555555ddd4ddd4ddd4ddd46c66eeeeeeeeeeeeeeee66ccbcbbcbbb00081008",
      "00888881008881000088810000000000d4ddddddddddddddddddddc4cccccccc",
      "555555554ddd4ddd4ddd4ddd6c66eeeeeeeeeeeeeeee66c6bcbbcbbb00888888",
      "00008888008888080088880800000000d4ddddddddddddddddddddc4cceeeece",
      "55555555dddddd4ddddddd4d6ce6eeeeeeeeeeeeeeee6ec6ccccccbb00008088",
      "000088888080888080808880000000004c44444444444444444444cceceeeeee",
      "e5555565cccccccc000000006ce6ee0e0e0e0e0e0eee6ec6cccccccc00008088",
      "00008888088088100880881000bb0b00eeeeeeeeeeeeeeeeccccccccec6e66ee",
      "55555565cccccccc000000000ce0e0e0e0e0e0e0e0e000c0cccccccc00008088",
      "0000b0bb01b0bb0001b0bb00b08bb800eeddddeeeeddddeeccccccccc6eeeece",
      "55555555cccccccc0000000066060e0e0e0e0e0e0e0e6e66ccbbcbcc0000b0bb",
      "0000b0bb00b0bb0000b0bb00b08b8800deddddeddeddddedccccccccc6eeeece",
      "55555555cccccccc0000000066e6e0000000000000e06066ccbbcbcc0000b0b0",
      "0000b0b000b0000b00b0000bbb808808dedddd6666ddddedccccccccc6ccccc6",
      "555e5556cccccccc0000000066060e000000000000006e66ccbbcbcc0000b0b0",
      "0000b0b000bb000b00bb000b0088ff88dedddd6666dddded4444444446444446",
      "55555555cccccccc00000000660600000000000000006066ccbbcbcc0000b0b0",
      "0000b0b0000bb000000bb0001e08ff80dedd6d6666d6ddeddeddddedd6dddde6",
      "56555e55cccccccc00000000660600000000000000006066ccbbcbcc0000b0b0",
      "0000b0b0000bb000000bb0000000e001eedd6d6666d6ddeeeeddddee6edddde6",
      "56555e55cccccccc00000000000000000000000000000000cccccccc00008080",
      "00008080000880000008800000000000eeee6e6666e6eeeeeeeeeeeeee6666ee",
      "555555550000000000000000000000000000000000000000cccccccc00000000",
      "000000000000000000000000eecccceceeee6e6666e6eeeeeeeeeeeecdccccdd",
      "55e5555530333b0330333b0300ee0e0000ee0e0000ee0e003c3333c300000000",
      "000000000000000000000000cecccccceedd66666666ddeeeeddddeeccbbccdc",
      "55e5655530333b0330111103e065e500e0bfef00e017e7003cbbbbc300000000",
      "00ff000000ff000000ff0000ceccccccde6d66666666d6eddeddddedccbbcbdc",
      "5555555530333b03301117035e55560efefffb0e7e77710e3c3333c300ff0000",
      "00ff000000ff000000ff0000cedccdccded6666666666deddeddddedccbbccdc",
      "5555555530363b03301617035e55550efeffff0e7e77770e3cbbbbc300ff0000",
      "00f0000000f0000000f00000cecdddccded6666666666deddeddddedccccccdc",
      "5555555530363b03301611035e56550efefbff0e7e71770e3c3333c300f00000",
      "001008000010080000100800cecdddcdccccccccccbcccccccccccccccccccdc",
      "555655e530333b0330333b03e065e500e0bfef00e017e7003cbbbbc300100800",
      "001088000010880000108800cecdccccccbcbbcbccccccccccccccccccccccdc",
      "55555555000000000000000000ee0e0000ee0e0000ee0e003c3333c300108800",
      "008088000080880000808800cecdccccccbcbbcbccbc6cc64cd444ccccccccdc",
      "55555555cccccc6cc6cccccceceeeeeeeececccccccccccccccccccc00888808",
      "008088000080880000888808cedccdcc5cbcbbcb32c36cc64cd444ccccccccec",
      "55555555cccccc6cc6cccccc666666666666cccccccccccccccccccc00888801",
      "008088000081180010808801ceccdccc5cbcbbcb44446cc64cd444ccccccccec",
      "55555555cccccc6cc6cccccceeeeeeeeee66cccccccccccccccccccc10808800",
      "00b1bb0000b0bb0000b0bb004eccddcd55b5bbcbcccc6cc64cd444cccccccce4",
      "55655555cccccc6cc6cccccceebbbbbbbb66cccccccccccccccccccc00b0bb00",
      "00b00b0000bb0b0000b00b00dec4cccccccccccccccccccccccccccccccc4ced",
      "55555555cccccc6cc6cccccceebbbbbbbbeecccccccccccccccccccc00b00b00",
      "00b00b00000bbb0000bb0b00de4d44444444444444444444444444444444d4ed",
      "55555555cccccc6cc6cccccceeccccc1cc55cccccccccccccccccccc000bbb00",
      "00b0bb0800b0b000000bbb0bde6dd6eddeddddeddeddddeddeddddedde6dd6ed",
      "55556555cccccc6cc6cccccceebb1b1fbb56cccccccccccccccccccc000b000b",
      "00000b000000080bb0000080ee6dd6eeeeddddeeeeddddeeeeddddeeee6dd6ee",
      "55555555cccccc6cc6cccccceeccf111cc55cccc9999cccccccccccc00080080",
      "000008000000000880000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6ee6ee",
      "5555555566666666bbbbbbbbee1b1fb1bb56cc9c9999c9cccccccccc00f0ff00",
      "f0f00f0000ff0f0f00000000ff0f00000000000000ff0f00000000f0ff000000",
      "55e55555bbbbbbbbbbbbbbbbee1c11cccc55cccc9bb9ccccccceccce00ff0f00",
      "00f00f0f00f0ff0000000000f0f2000000000000ff0f0000000000ff0f00000f",
      "55e56555bbbbbbbbbbbbbbbbeebbb1bbbb66cc9c9999c9cccceeeece002f0f00",
      "002f0f0000f0f200f0000000fff20f00000000f02fff00000000f02fff000000",
      "55555555bbbbbbbbbbbbbbbbeecccccccc5fcccc9bb9cccccccecccef02f0f0f",
      "002fff0000f0f200f00000f02f220f00000000ff22f200000000f022220f0000",
      "55555555bbbbbbbbbbbbbbbbeebbbbbbbb66cc9c9999c9ccccceccce002ff200",
      "002f2200f02ff20000f000ff22f20f000000f02f22f2000f0000f02f22f20000",
      "55555555bbbbbbbbbbbbbbbbee6666666666cccc4444cccccceeeece002f230f",
      "f032230ff032f20000f0f02f22ff00000000f02222f20000000000ff22220f00",
      "555655e5bbbbbbbbbbbbbbbbeeeeeeeeee66ccccdbbdcccccceeeecef032230f",
      "f032230ff032230f0000ff22220f00000000f02222f20f00000000f02222f200",
      "55555555bbbbbbbbbbbbbbbbee5e5555e566ccccdbbdcccceeeeeecef032f300",
      "003f230f003f230f00002f2223f2000f00002f2223220f000000002f3222f200",
      "eeeeeeeebbbbbbbbbbbbbbbbee5e6666e5666666dbbd6666eeeeee6e00000f00",
      "f000f00000f0000f00002f2233220f0000f02f2233220f00f000f0223322f200",
      "6e6666eecbbbbbbbbbbbbbbbeeee6666ee666666bbbb66666e6ee66e0000ff00",
      "0000ff0f00ff000000f02f223322f20000f022223322ff0000002f223322f20f",
      "6e6666edbbbbbbbbbbbbbbbdedeeeeeeeede4dddbbbb4ddddedeeddef0f02f0f",
      "00f0f200f0f20f0000f02f323323f20f00002f323323f20000f02f323323220f",
      "6e6666edcbbbbbcbbbbbbbbdedeeeeeeee4eddddbbbbddddde4eedde00f0220f",
      "002ff200f0220f0000f02f323333220f00002f323323f20000f022333323f20f",
      "6e6666edcbbbbbcbbbbbbbbdddddd4ddddddd4ddddddd4dddedde4dd002f230f",
      "f022230ff032f2000000ff323333220f0000ff2233230f0000f022333323ff00",
      "de66d6edcbbbbbcbbbbbbbbdddd4ddd4ddd4ddd4ddd4ddd4ddd4ddd4f032230f",
      "f03223f2f032220f0000f0223323f20f0000f02233230f0000f02f3233220f00",
      "ee66d6eecbbbbccbbbbbbbbd4ddd4ddd4ddd4ddd4ddd4ddd4ddd4dddf032f30f",
      "002f33f2f03f230f0000ff2f3223ff000000002f33f30f000000ff3233f2ff00",
      "eeeeeeeecbbbbccbbbbbbbbddddddd4ddddddd4ddd4ddd4ddddddd4d003ff300",
      "00f0330f003ff30000f0ffff3ff3ff0f00f0ffff33ffff0f00ffff3f33ffffff",
      "66666666dd6d6666666666666666d6dddd6d66d6ddddd4ddd4dddddd66666666",
      "dddddddddddddddddd6d6666ddddddddddddddddddddddddddddddddd66666d6",
      "6666c6666d66666666666666666666d66d666666d6d4ddd4dd6666d666666666",
      "6d66d6dd6d6d666d6666666666dddddddd6d66ddddddddd4dd6666d6d66d666d",
      "b66bcc6c6d66666666666666666666d66d66666646dd66666d666666bbbbbbbb",
      "d6dbcddc6d6d666d6666666666dddddddd6d66dddddd66666d6666d6bbdbbbbb",
      "b66b6c6cbdbbbbbbbbbbbbbbbbbbbbdbbdbbbbbbdb4dbbbbbdbbbbbbdbdcddbd",
      "d6dd6c6cddbbbbbdbbbbbbbbbbdbddddddbbbbddddddbbbbbdbbdbdddbdcddbd",
      "b66b6c6cbdbcccccccdcddddddbbbb4bbdccccccdcddebbebdcbccbbcbddcdbd",
      "b66d6c6cddbcccdcccdcdddddddbdd4dddddddccdcddebbebddbdcddcbddcdbd",
      "b66b6c6cbdbddcdcdcdceeeedebbbbdbb4dcdcdcdcd4cbbebdccccbcdbdddcbd",
      "b66d6c6cdddddddddddceeeededbddddb4dcdddcdcd4cbbebdddcddcdbdddcbd",
      "b66b6c6cbdbcdcdcdcdcfe7edebbbbdbbddcdcdc4cddebbebdccc2bcbbbbbbbb",
      "b66dddddbdbcdcdcddddfe7edebddbddbddcdcddddddebbebdddc2dcdbbbdbbb",
      "b66bcc6cbdbdccccccdcfd7eddbbbbdbbdccccccdc4dcbbebd2c22bc66666666",
      "b6ddcc6cbdbdccdcccdcfd7eddbbdbddbdccccccdcddcbbedddd2dbc6d666d66",
      "ebebbebebdbcbbbbbbbbfb7b77b7bb4bbdbbbbbbdbddebbec42222c266666666",
      "ebdbbebebdbcbbbdbbbbdbddddb7bb4bbdbbbbbbdbddebdeddddddc2666666d6",
      "bbbbbbbbbdbdbdccbcbdccffff7bbbdbbdbfb9b2db4dcbbebdccccbce6eeee6e",
      "bbdbbbbbbdbdddccbcbddcffff7bbbdbbdbfb9b2dbddcbbeddcddcbdedeededd",
      "66666666bdbcbdddbdbddccddb5fd7dbbbbcbcbcdbd4ebbebdfcffbce6bbdb6e",
      "66dd6666bdbcddddbdbddccddb5fd7dbbbbcbcbcddd4edbebdfcddddd6bddd6e",
      "bb6b66b6bbbbbbbbbbbbdccddbefd7dbbbbbbbbbbbbbbbbbcdefe6cfe6ebbe6e",
      "bb6d66b6dbdddbbbbbbbddcddbefd7dbbbbbbbbbbddbddbbcddfdddde6ddbd6e",
      "bb7777b7d6ddddddddbddccddbeedebbcbccbcceffffcfbecd6f6ecfe6ebbe6e",
      "bb7d77b7d6dddddddddddccddbeededbcbccbcdefdffcdbdcddddddfe6dbbe6e",
      "bb6666b6d62c9c7cccbddccddbddddbbcbccbceebbbbebbecdefe6cfe6bdbb6e",
      "dbdd66b6dd2c9cdcddbddccddbddddddcbccdcddbbbbdbdddddde6cfe6ddbb6e",
      "bbffffbfd6ddddddddbdcccccbccccccccccbcce7777c7bebdfcffbce6eeee6e",
      "dddffddfddddddddddbdccddcbcccddcccccddcd7777c7deddfdffbce6ddee6e",
      "bb6b66b6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdccccbce6eeee6e",
      "bb6bd6ddbbbbbbbbbbbbbbbdbbbbbdbbddddbbbbbbbbbbbbddcdccbcd6edee6e",
      "66666666000e000000e0000eeeeeeeeeeeeeeeeecccccccccccccccccccccc6c",
      "ccccccccccccccccccccccccccccccccccccccccd4ddddddd4ddddddd4dddddd",
      "c666c666000e000000e0000e5e655f5555555555cccccccccccccccccccccc6c",
      "ccccccccccccccccccccccccccccccccccccccccddd4ddd4ddd4ddd4ddd4ddd4",
      "666c666c00e0ee0000e0ee00c56cffcccccccccccccccccccccccccccccccc6c",
      "cccccccccccccccccccccccccccccccccccccccc4ddd4bdd4ddd4dddbddd4ddd",
      "c666c6660000000e00e00000cc6ccfcccccccccccccccccccccccccccccccc6c",
      "cccccccccccccccccccccccccccccccccccccccccdcccbccccccccccbcccccdc",
      "666c666c0000000e00e00000cc6dcdcccccccccccccccccccccccccccccccc6c",
      "cccccccccccccccccccccccccccccccccccccccccccccbccccbbcceceeeececc",
      "c666c6660000000eee0e0000ccdccccccccccccc3c333bc3cccccccccccccc6c",
      "cc2c22c22c2222cc2c22cc2ccc2ccc2222c22ccccccccbccccbbcbecbbb1cebb",
      "666c666c000000eee0000000cecccccccccccccc3c1111c3cccccceeeeeecc6c",
      "cc2cccc2cc2cccccc2ccc22cc222ccc2ccc22ccccccccbccccbbccecbb1bbecc",
      "6d6666d60000000e000e0000eeeeeeeeeeeeeeee3c1117c3cccccceecccccc6c",
      "cc2ccccccc2cccccc2ccc22c2c2cccc2ccc22ccccccccbccccccccecbbbbcecc",
      "c6cccc6c0000ee0e000e0000c5cccceceeeeeeee361b1763666666ee66666666",
      "cccc22c2cc2ccccc2222c22ccc2ccc2222cc2cccccbbbbbbcbccccecbbbbcecc",
      "c6cccc6c00e00e00e00e0000ccccccecee5555ee361b1163e6eeeeeeeeee6666",
      "ccccccc2cc2cccccc2ccc22ccc2cccc2cccc2cccccb4b4b4c4bbc4eceeeececc",
      "c6cccc6c000e00000ee00000ccccccec5ecccce53d333bd3dddeedeedd4d4ddd",
      "cc2cccc2cc2cccccc2ccc22ccc2cccc2cccccccccc4b4b4bcbbbcbeceefececc",
      "c6cccc6ce0e000000e00eeeeccccccecceccccecdd4ddddddddeedeedddddddd",
      "cc2c22c2cc22c22c22ccc222c222c222cccc2ccccccccccccccccccccccccccc",
      "c6cccc6ce000eeeee0000000ccccccecce1cccecddddd4ddedeeeeeeeeeed4dd",
      "ccccccccccccccccccccccccccccccccccccccccc4cccccccccccccccccccc4c",
      "c6cccc6c0e000000000e0000ccccccecceccccecddd4ddd4ddd4ddd4ddd4ddd4",
      "3c3cc3333333c33cc333c33c3333c33333c3c3334d44444444444444444444d4",
      "c6cccc6c0e000000000e0000cccccceececcccec4ddd4ddd4ddd4ddd4ddd4ddd",
      "cccccccccccccccccccccccccccccccccccccccceddd4ddd4ddd4ddd4ddd4dde",
      "666666660e000000000e0000eeeeeeeececcccecdddddd4ddddddd4ddddddd4d",
      "cccccccccccccccccccccccccccccccccccccccceddddd4ddddddd4dddddddde"
    ],
    "map": [
      "31313131315161615231313131313131a0313131313131313131313131313131",
      "3131313131a03131313131313131313131313131313131313131313131313131",
      "3131a03131313131313131313131313151a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "23242546265162725253543626232425a03131363131313626313131311d3131",
      "9731362631a03131313153543626319731313131311d31313136263131313131",
      "8031a0313126312c2d2e311d3126313197a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "33343531a6a771625263646566333435a03126310e31a5a531313166a6313131",
      "9194963131a031310e3163646566319431a6313131313131a53166666631310e",
      "9631a03131313131313131313131319180a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "40202022b6b721212273747576202030a02222221e22b5b522222276b6b72222",
      "8794802222a022221e2273747576229422b6b72222222222b52276767622221e",
      "9022a00303030303030303030303039192a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "20202021212121212121212121202020a0212121212121212121212121212121",
      "2121212121082121212121212121212121212121212121212121212121212121",
      "2121a00b13131313131313131313131313a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "30204021212121212121212121202040a0972121212121212121212121212121",
      "2121212121082121212121212121212121212121212121212121212121212121",
      "2121a00c13131313133c3d131313131313a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "20202021212121212121212121302020a0872121212121212121212121212121",
      "2121212121212121212121212121212121212121212121212121212121212121",
      "2121a0131313134b4e4c4d2f4f13131313a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "20302021212121212121212121202020a0962121212121212121212121212121",
      "21212121212121212121212121212121adaeaf21212121212197212121212121",
      "2121a0131313135b5e5c5d3f5f70131313a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "20202021212121212121212121204020a08221212121212121818283848521ad",
      "aeaf2184858680818286818283848521bdbebf21848586808180212121212121",
      "212108131313131313131313131313130fa00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "30202021212121212121212121202020a08521212121212121978787949521bd",
      "bebf2194959690919296919293949521adaeaf21949596909192212121212121",
      "212108131313131313131313131313131fa00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "20203021212121212121212121202040a0812121212121212121212121212121",
      "21212121212121212121212121212121bdbebf21212121212121212121212121",
      "212113131313131313131313131313130fa00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "20203021212121212121212121202020a0972121212121212121212121212121",
      "2121212121212121212121212121212121212121212121212121212121212121",
      "212113131313131313131313131313131fa00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "20202021212121212121212121202020a0212121212121212121212121212121",
      "2121212121a02121212121212121212121212121212121212121212121212121",
      "2121131313131313131313131313131313a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "30202021212121212121212121303020a0212121212121212121212121212121",
      "2121212121a02121212121212121212121212121212121212121212121212121",
      "2121a013131313131313131313b4131313a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "97879781828384852186818283978797a0818283848521212121218681808397",
      "8797878086a08083978797818081808283842180839787978180828384852121",
      "2121a087138713131313a3a4a4b3131313a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "82809091929394952196919293909192a0919293949521212121219691929382",
      "8087919096a09293828090919091908787942192938280909190878794952121",
      "2121a09791901313131313131313131313a00000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000006900000000000000000000000000000069000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2020505656565656565656565656565656565656565656565656565656565656",
      "5656562121212121212121212121212121212156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "402020565626565656565656565656365656565656265656565656562c2d2e56",
      "5656562121212121212121212121212121212156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2050205656565656a8a9aaabac56565656565656565656565656565656565656",
      "5656562121215656565656565656565621212156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2020205636565656b8b9babbbc56565656565656365656202020202020565656",
      "5656562121565656565656565656565656212156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2020205656565656565656565656565656265656565620202020202020205656",
      "5626562156565656565656565656565656562156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2030205656565620202020203020565656565656565620202020202020202056",
      "5656562156565656565656565656565656562156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2020205656562020206020202020205656565656562020202020202020202056",
      "5656562156565656565656565656565656562156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "5020205656562050202020202020205636565656562020202020202020202056",
      "3656562156565656565656565656565656562156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2020405618562020202020202020505656185656182020202020202020202056",
      "5618562156565656565656565656565656182156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2020205656565020202060202020205656565656565620202020202020202056",
      "5656562156565656565656565656565656562156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2040205656565620202020202020565656565656565620202020202020205656",
      "5656562156565656565656565656565656562156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2020205656565656565656565656565656565656565656562020202056565656",
      "5656562121565656565656565656565656212156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2020205656565656565656565631563131565656565656565656565656030303",
      "0303032121215656565656565656565621212156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "30202056565656565656565636465354561d5656565656565656565613133c3d",
      "1313132121212121212121212121212121212156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "20202056565626565656563131a56364653131565656565656565656134b4c4d",
      "4e4f132121212121212121218788898a8c8d2156000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "50202056565656565656212121b57374752121565656565656565613135b5c5d",
      "5e5f1321212121212121212198999a9b9c9d2121000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000"
    ],
    "pal": [
      "1b121280e1e1e101ffca0a02eeba59032d3e3804232e2b0537403a062ced7907",
      "000000081a65c7091b42a90a5960620b3c554e0c212e300d2323230ee137370f"
    ],
    "spf": [
      "0000000100000000000000000000000200000001000000000000000000020102",
      "0001010000000000000000000202020200000000000000000000000002020202",
      "0000000000000000000000020202020200000002020000000000000202020202",
      "0000000202020200000000000000000002000001010101000000000000000000",
      "0202020202020202000000000000000002020202020202020000000000000000",
      "0000000303020202000000000002020200000003030101010000000000020202"
    ],
    "snd": [
      "064200000000000000002b070000000028072b07000000000000300700000000",
      "00002b0700000000000028070000000000002b07000000000000000000000000",
      "0000064818070000000000000c0700000000000018070000000000000c070000",
      "0000000018070000000000000c0700000000000018070000000000000c070000",
      "00000000064205000500050005003207050005002f0732070500050005002b07",
      "0500050005002f0705000500050032070500050005002f070500050005000500",
      "05000500050006481f0705000500050013070500050005001f07050005000500",
      "13070500050005001f0705000500050013070500050005001f07050005000500",
      "1307050005000500064208000800080008002b072b072b072b07240724072407",
      "240708000800000000002b072b072b072b07240724072407240730072f033007",
      "2f032b072b072b072b070e480c070c070c0700000c070c070c07000013071307",
      "0c0700000c070000130700000c070c070c0700000c070c070c07000013071307",
      "0c0700000c0700000c0700000e00240724070000240700002407241f00002407",
      "0000240700002407000025070000240724070000240700002407241f00002407",
      "00002407000022070000230700000e002407240724072407241f0000241f0000",
      "240724070000000024072507000000002407240724072407241f0000241f0000",
      "240724070000000024072307000000000e001f071f0700001f0700001f071f1f",
      "00001f0700001f0700001f070000200700001f071f0700001f0700001f071f1f",
      "00001f0700001f0700001d0700001e0700000e001f071f071f071f071f1f0000",
      "1f1f00001f071f07000000001f072007000000001f071f071f071f071f1f0000",
      "1f1f00001f071f07000000001f071e0700000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000401241f0000",
      "0000000030190000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000021207",
      "1207120712070c070c070c070c07000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "2407000000000000000000000000000023072407000000000000000000000000",
      "2307210700000000000000000000000024072707240727070000000000000000"
    ],
    "mus": [
      "c0410000424300004441000042c30000c5800000000000000000000000000000",
      "4500000045000000c54700004547000045490000454900004546000045460000",
      "4548000045c80000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000"
    ]
  }
}